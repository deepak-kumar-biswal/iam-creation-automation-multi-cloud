name: 'Multi-Cloud IAM Deployment Pipeline'

on:
  push:
    branches: [main, develop, feature/*]
  pull_request:
    branches: [main, develop]
  schedule:
    - cron: '0 2 * * 0' # Weekly security scan
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - staging
          - production
      accounts:
        description: 'Target accounts (comma-separated or "all")'
        required: true
        default: 'all'
      dry_run:
        description: 'Perform dry run only'
        type: boolean
        default: true

env:
  TF_VERSION: '1.5.7'
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'

jobs:
  security-scan:
    name: 'Security & Compliance Scan'
    runs-on: ubuntu-latest
    if: github.event_name != 'workflow_dispatch' || github.event.inputs.dry_run == 'true'
    
    steps:
      - name: 'Checkout Code'
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: 'Setup Python'
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: 'Install Security Tools'
        run: |
          pip install bandit safety checkov semgrep
          npm install -g snyk
      
      - name: 'Run Bandit (Python Security)'
        run: |
          bandit -r scripts/ tests/ -f json -o bandit-report.json || true
      
      - name: 'Run Safety (Dependency Check)'
        run: |
          safety check --json --output safety-report.json || true
      
      - name: 'Run Checkov (IaC Security)'
        run: |
          checkov -d terraform/ --framework terraform --output json --output-file checkov-report.json || true
      
      - name: 'Run Semgrep (Static Analysis)'
        run: |
          semgrep --config=auto terraform/ scripts/ --json --output semgrep-report.json || true
      
      - name: 'Upload Security Reports'
        uses: actions/upload-artifact@v3
        with:
          name: security-reports
          path: '*-report.json'
      
      - name: 'Security Gate Check'
        run: |
          python scripts/security-gate.py \
            --bandit bandit-report.json \
            --safety safety-report.json \
            --checkov checkov-report.json \
            --semgrep semgrep-report.json \
            --threshold high

  terraform-validate:
    name: 'Terraform Validation'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        cloud: [aws, gcp, azure]
        environment: [dev, staging, production]
    
    steps:
      - name: 'Checkout Code'
        uses: actions/checkout@v4
      
      - name: 'Setup Terraform'
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TF_VERSION }}
      
      - name: 'Terraform Format Check'
        run: terraform fmt -check -recursive terraform/
      
      - name: 'Terraform Validate - ${{ matrix.cloud }}'
        working-directory: terraform/modules/${{ matrix.cloud }}
        run: |
          terraform init -backend=false
          terraform validate
      
      - name: 'TFLint'
        uses: terraform-linters/setup-tflint@v3
        with:
          tflint_version: latest
      
      - name: 'Run TFLint'
        run: |
          tflint --init
          tflint terraform/modules/${{ matrix.cloud }}/

  test-suite:
    name: 'Comprehensive Test Suite'
    runs-on: ubuntu-latest
    needs: [security-scan, terraform-validate]
    
    services:
      localstack:
        image: localstack/localstack:latest
        env:
          SERVICES: iam,sts,organizations
          DEFAULT_REGION: us-east-1
        ports:
          - 4566:4566
    
    steps:
      - name: 'Checkout Code'
        uses: actions/checkout@v4
      
      - name: 'Setup Python'
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: 'Install Dependencies'
        run: |
          pip install -r tests/requirements.txt
          pip install -r requirements.txt
      
      - name: 'Run Unit Tests'
        run: |
          python -m pytest tests/unit/ \
            --cov=scripts/ \
            --cov-report=xml \
            --cov-report=html \
            --junit-xml=junit-unit.xml
      
      - name: 'Run Integration Tests'
        env:
          AWS_ENDPOINT_URL: http://localhost:4566
          AWS_ACCESS_KEY_ID: test
          AWS_SECRET_ACCESS_KEY: test
          AWS_DEFAULT_REGION: us-east-1
        run: |
          python -m pytest tests/integration/ \
            --junit-xml=junit-integration.xml
      
      - name: 'Run Load Tests'
        run: |
          python tests/load/load_test.py \
            --accounts 100 \
            --concurrent 10 \
            --duration 300
      
      - name: 'Upload Test Results'
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: test-results
          path: |
            junit-*.xml
            htmlcov/
            coverage.xml

  plan-dev:
    name: 'Plan - Development'
    runs-on: ubuntu-latest
    needs: [test-suite]
    if: github.ref == 'refs/heads/develop' || contains(github.head_ref, 'feature/')
    environment: dev
    
    steps:
      - name: 'Checkout Code'
        uses: actions/checkout@v4
      
      - name: 'Setup Cloud CLIs'
        uses: ./.github/actions/setup-cloud-clis
      
      - name: 'Configure AWS Credentials'
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_DEV }}
          aws-region: us-east-1
      
      - name: 'Configure Azure Credentials'
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS_DEV }}
      
      - name: 'Configure GCP Credentials'
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY_DEV }}
      
      - name: 'Terraform Plan - AWS'
        working-directory: terraform/environments/dev
        run: |
          terraform init
          terraform plan \
            -var-file="aws.tfvars" \
            -out=aws-dev.tfplan
      
      - name: 'Terraform Plan - GCP'
        working-directory: terraform/environments/dev
        run: |
          terraform plan \
            -var-file="gcp.tfvars" \
            -out=gcp-dev.tfplan
      
      - name: 'Terraform Plan - Azure'
        working-directory: terraform/environments/dev
        run: |
          terraform plan \
            -var-file="azure.tfvars" \
            -out=azure-dev.tfplan
      
      - name: 'Upload Plans'
        uses: actions/upload-artifact@v3
        with:
          name: terraform-plans-dev
          path: terraform/environments/dev/*.tfplan

  deploy-dev:
    name: 'Deploy - Development'
    runs-on: ubuntu-latest
    needs: [plan-dev]
    if: github.ref == 'refs/heads/develop'
    environment: dev
    
    steps:
      - name: 'Checkout Code'
        uses: actions/checkout@v4
      
      - name: 'Download Plans'
        uses: actions/download-artifact@v3
        with:
          name: terraform-plans-dev
          path: terraform/environments/dev/
      
      - name: 'Setup Cloud CLIs'
        uses: ./.github/actions/setup-cloud-clis
      
      - name: 'Configure Credentials'
        uses: ./.github/actions/configure-cloud-credentials
        with:
          environment: dev
          aws_role: ${{ secrets.AWS_ROLE_DEV }}
          azure_creds: ${{ secrets.AZURE_CREDENTIALS_DEV }}
          gcp_key: ${{ secrets.GCP_SA_KEY_DEV }}
      
      - name: 'Deploy Multi-Cloud Infrastructure'
        working-directory: terraform/environments/dev
        run: |
          # Deploy in parallel with proper error handling
          ./scripts/parallel-deploy.sh \
            --clouds "aws,gcp,azure" \
            --environment dev \
            --max-concurrent 3 \
            --retry-attempts 3
      
      - name: 'Post-Deployment Verification'
        run: |
          python scripts/verify-deployment.py \
            --environment dev \
            --clouds aws,gcp,azure \
            --comprehensive

  plan-staging:
    name: 'Plan - Staging'
    runs-on: ubuntu-latest
    needs: [deploy-dev]
    if: github.ref == 'refs/heads/main'
    environment: staging
    
    steps:
      - name: 'Checkout Code'
        uses: actions/checkout@v4
      
      - name: 'Multi-Cloud Planning'
        uses: ./.github/actions/multi-cloud-plan
        with:
          environment: staging
          aws_accounts: ${{ secrets.AWS_ACCOUNTS_STAGING }}
          gcp_projects: ${{ secrets.GCP_PROJECTS_STAGING }}
          azure_subscriptions: ${{ secrets.AZURE_SUBSCRIPTIONS_STAGING }}

  deploy-staging:
    name: 'Deploy - Staging'
    runs-on: ubuntu-latest
    needs: [plan-staging]
    if: github.ref == 'refs/heads/main'
    environment: staging
    
    steps:
      - name: 'Checkout Code'
        uses: actions/checkout@v4
      
      - name: 'Staging Deployment'
        uses: ./.github/actions/multi-cloud-deploy
        with:
          environment: staging
          max_concurrent_accounts: 50
          deployment_strategy: blue-green

  approve-production:
    name: 'Production Approval Gate'
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    if: github.ref == 'refs/heads/main'
    environment: production-approval
    
    steps:
      - name: 'Approval Required'
        uses: trstringer/manual-approval@v1
        with:
          secret: ${{ github.TOKEN }}
          approvers: platform-team,security-team,compliance-team
          minimum-approvals: 2
          issue-title: "Production Deployment Approval Required"
          issue-body: |
            ## Production Deployment Request
            
            **Branch:** ${{ github.ref }}
            **Commit:** ${{ github.sha }}
            **Author:** ${{ github.actor }}
            
            ### Changes Summary
            - IAM resources will be deployed to ${{ secrets.PRODUCTION_ACCOUNT_COUNT }} accounts
            - Estimated deployment time: 45 minutes
            - Risk level: Medium
            
            ### Pre-deployment Checklist
            - [ ] Security scan passed
            - [ ] All tests passed  
            - [ ] Staging deployment verified
            - [ ] Change management ticket approved
            - [ ] Rollback plan confirmed
            
            Please review and approve for production deployment.

  deploy-production:
    name: 'Deploy - Production'
    runs-on: ubuntu-latest
    needs: [approve-production]
    environment: production
    
    steps:
      - name: 'Checkout Code'
        uses: actions/checkout@v4
      
      - name: 'Pre-Production Checks'
        run: |
          python scripts/pre-production-checks.py \
            --verify-connectivity \
            --check-quotas \
            --validate-permissions \
            --dry-run-sample
      
      - name: 'Production Deployment'
        uses: ./.github/actions/multi-cloud-deploy
        with:
          environment: production
          max_concurrent_accounts: 20
          deployment_strategy: rolling
          canary_percentage: 10
          monitoring_enabled: true
          auto_rollback: true
      
      - name: 'Post-Production Verification'
        run: |
          python scripts/comprehensive-verification.py \
            --environment production \
            --sample-size 100 \
            --deep-validation
      
      - name: 'Update Monitoring Dashboard'
        run: |
          curl -X POST "${{ secrets.GRAFANA_WEBHOOK }}" \
            -H "Content-Type: application/json" \
            -d '{
              "deployment": {
                "environment": "production",
                "commit": "${{ github.sha }}",
                "timestamp": "${{ github.event.head_commit.timestamp }}",
                "status": "success"
              }
            }'

  chaos-engineering:
    name: 'Chaos Engineering Tests'
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'schedule'
    environment: chaos-testing
    
    steps:
      - name: 'Checkout Code'
        uses: actions/checkout@v4
      
      - name: 'Run Chaos Tests'
        run: |
          python tests/chaos/chaos_suite.py \
            --environment production \
            --scenarios network-partition,service-failure,high-load \
            --duration 1800 # 30 minutes

  notification:
    name: 'Deployment Notification'
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: always()
    
    steps:
      - name: 'Notify Teams'
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#iam-automation'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          fields: repo,message,commit,author,action,eventName,ref,workflow
        
      - name: 'Update Status Page'
        if: success()
        run: |
          curl -X POST "${{ secrets.STATUS_PAGE_API }}" \
            -H "Authorization: Bearer ${{ secrets.STATUS_PAGE_TOKEN }}" \
            -d '{
              "component_id": "iam-automation",
              "status": "operational",
              "message": "Deployment completed successfully"
            }'
